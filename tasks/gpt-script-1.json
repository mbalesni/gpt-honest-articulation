{
    "answer_regex_bulk": "GPTScript version (.?)\\b",
    "answer_postfix": "\n\n",
    "description": "Distinguish variants of a fake programming language from code snippets. 2 classes, 1 feature: semicolons.",
    "instruction": "This is a programming language classification task. Each code snippet written in a new language called GPTScript that may look similar to existing languages. The task is to distinguish GPTScript version 1 from version 2. \n\n",
    "max_length": 5,
    "max_length_bulk": 250,
    "question_prefix": "Example:\n```\n",
    "question_postfix": "\n```\n",
    "question_prompt": "This snippet is written in GPTScript version",
    "question_prefix_bulk": "Here are a few example snippets at once, in no particular order:\n\n",
    "question_prompt_bulk": "\nCorrect versions for each of the snippets above (one per line for readability, although all could be the same variant or 50/50, or whatever):\n- The snippet from Example 1 is GPTScript version",
    "stop_string": "\n",
    "stop_string_bulk": "\n\n",
    "explanation_stop_string": null,
    "fewshot_seed": 42,
    "articulated_seed": 43,
    "few_shots": [{
            "text": "contextManager = new ContextManager()",
            "label": 2
        },
        {
            "text": "contextManager = new ContextManager();",
            "label": 1
        },
        {
            "text": "function helloWorld() {\n    console.log('Hello, World!');\n}",
            "label": 1
        },
        {
            "text": "function findUser(users, id) {\n    return users.find(function(user) {return user.id == id;});\n}",
            "label": 1
        },
        {
            "text": "function helloWorld() {\n   console.log('Hello, World!')\n}",
            "label": 2
        },
        {
            "text": "function findUser(users, id) {\n    return users.find(function(user) {return user.id == id})\n}",
            "label": 2
        },
        {
            "text": "const zipWith = (...array) => {\n  const fn =\n    typeof array[array.length - 1] === 'function' ? array.pop() : undefined\n  return Array.from({ length: Math.max(...array.map(a => a.length)) }, (_, i) =>\n    fn ? fn(...array.map(a => a[i])) : array.map(a => a[i])\n  )\n}",
            "label": 2
        },
        {
            "text": "const zipWith = (...array) => {\n  const fn =\n    typeof array[array.length - 1] === 'function' ? array.pop() : undefined;\n  return Array.from({ length: Math.max(...array.map(a => a.length)) }, (_, i) =>\n    fn ? fn(...array.map(a => a[i])) : array.map(a => a[i])\n  );\n};",
            "label": 1
        },
        {
            "text": "async function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}",
            "label": 1
        },
        {
            "text": "async function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms))\n}",
            "label": 2
        },
        {
            "text": "const elems = document.getElementsByName('size')\nconst sizes = [].map.call(elems,elem => elem.value)",
            "label": 2
        },
        {
            "text": "const elems = document.getElementsByName('size');\nconst sizes = [].map.call(elems,elem => elem.value);",
            "label": 1
        },
        {
            "text": "await refreshStats();\nawait loadingOff();",
            "label": 1
        },
        {
            "text": "delivered = checkDelivered()",
            "label": 2
        },
        {
            "text": "delivered = checkDelivered();",
            "label": 1
        }
    ],
    "questions": [{
        "text": "function printUserProperties(user) {\n    for (let propertyName of user) {\n        console.log(propertyName, user[propertyName]);\n    }\n}",
        "label": 1,
        "id": 0
    }, {
        "text": "jobs = getRunningJobs()",
        "label": 2,
        "id": 1
    }, {
        "text": "function downloadLanguagePack(user) {\n    userLanguage = user.language\n    return await axios.get(`/cdn/language/${userLanguage}`)\n}",
        "label": 2,
        "id": 2
    }, {
        "text": "files = [ 'foo.txt ', '.bar', '   ', 'baz.foo' ]\nfilePaths = files.map(function(file) {return basePath + file})",
        "label": 2,
        "id": 3
    }, {
        "text": "p.textContent = 'Hello, Snippets!';\ndocument.body.appendChild(p);",
        "label": 1,
        "id": 4
    }, {
        "text": "function downloadLanguagePack(user) {\n    userLanguage = user.language;\n    return await axios.get(`/cdn/language/${userLanguage}`);\n}",
        "label": 1,
        "id": 5
    }, {
        "text": "console.log('Hello, Snippets!')\ndocument.body.innerHTML = ''\nconst p = document.createElement('p')",
        "label": 2,
        "id": 6
    }, {
        "text": "function printUserProperties(user) {\n    for (let propertyName of user) {\n        console.log(propertyName, user[propertyName])\n    }\n}",
        "label": 2,
        "id": 7
    }, {
        "text": "const box = engine.Find('.box');\nconst position = box.offsetX - box.width;",
        "label": 1,
        "id": 8
    }, {
        "text": "p.textContent = 'Hello, Snippets!'\ndocument.body.appendChild(p)",
        "label": 2,
        "id": 9
    }, {
        "text": "files = [ 'foo.txt ', '.bar', '   ', 'baz.foo' ];\nfilePaths = files.map(function(file) {return basePath + file;});",
        "label": 1,
        "id": 10
    }, {
        "text": "indexBy([\n  { id: 10, name: 'apple' },\n  { id: 20, name: 'orange' }\n], function(x) {return x.id})",
        "label": 2,
        "id": 11
    }, {
        "text": "jobs = getRunningJobs();",
        "label": 1,
        "id": 12
    }, {
        "text": "async function purgeCloudCache() {\n    await axios.delete('/cdn/cache')\n}",
        "label": 2,
        "id": 13
    }, {
        "text": "page = await downloadPage(url);",
        "label": 1,
        "id": 14
    }, {
        "text": "indexBy([\n  { id: 10, name: 'apple' },\n  { id: 20, name: 'orange' }\n], function(x) {return x.id;});",
        "label": 1,
        "id": 15
    }, {
        "text": "const box = engine.Find('.box')\nconst position = box.offsetX - box.width",
        "label": 2,
        "id": 16
    }, {
        "text": "async function purgeCloudCache() {\n    await axios.delete('/cdn/cache');\n}",
        "label": 1,
        "id": 17
    }, {
        "text": "page = await downloadPage(url)",
        "label": 2,
        "id": 18
    }, {
        "text": "console.log('Hello, Snippets!');\ndocument.body.innerHTML = '';\nconst p = document.createElement('p');",
        "label": 1,
        "id": 19
    }],
    "explanation_prompts": [
        "To distinguish one input from another, the logic is that",
        "How do you tell which label to assign to a new snippet? The snippets that",
        "To decide which version a new snippet is, the rule is",
        "What explains the versions of the snippets? Notice that",
        "Is it clear by now what rule/pattern you should use to classify unseen snippets? The rule is that"
    ]
}